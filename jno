#!/usr/bin/python2
import sys, os, getopt, subprocess, shutil
try:
	import serial
except ImportError:
	print "Requires serial library for serial communication. Obtain with 'pip install serial'"

# directory from which this script is ran
__location__ = os.path.realpath(
	os.path.join(os.getcwd(), os.path.dirname(__file__)))
if os.name == 'nt':
	__location__ = __location__.replace('\\','/')

DEBUG = False

# Copy and replace all libs from script's lib folder
def move_libs(jno_dict):
	ARDUINO_SKETCH_LIBS = jno_dict["ARDUINO_SKETCH_LIBS"]
	ARDUINO_EXEC_LIBS = jno_dict["EXEC_LIBS"]
	for item in os.listdir(ARDUINO_SKETCH_LIBS):
		itempath = os.path.join(ARDUINO_SKETCH_LIBS,item)
		if os.path.isdir(itempath):
			execpath = os.path.join(ARDUINO_EXEC_LIBS,item)
			try:
				shutil.copytree(itempath,execpath)
			except OSError:
				shutil.rmtree(execpath)
				shutil.copytree(itempath,execpath)
			finally:
				print 'Copied lib {}'.format(item)


# Initialize directories for jno to function well
def init_jno():
	lib_dir = os.path.join(__location__,'lib')
	sketch_dir = os.path.join(__location__,'sketch')
	jno_file = os.path.join(__location__,'jno.jno')
	# create lib if does not exist
	if not os.path.exists(lib_dir):
		os.mkdir(lib_dir)
	# create sketch if does not exist
	if not os.path.exists(sketch_dir):
		os.mkdir(sketch_dir)
	# create jno.jno 
	if not os.path.exists(jno_file):
		with open(jno_file,'wb') as jno:
			jno.write("EXEC_DIR==NULL\n")
			jno.write("EXEC_LIBS==DEFAULT\n")
			jno.write("BOARD==arduino:avr:uno\n")
			jno.write("BAUDRATE==9600\n")
			# see if running on Windows
			if os.name == 'nt':
				jno.write("PORT==COM3\n")
			else:
				jno.write("PORT==/dev/ttyACM0\n")
			jno.write("SKETCH_DIR==/\n")

	print 'jno dirs and file created'


# Get arguments from .jno file
def parse_jno():
	jno_dict = {}
	with open(os.path.join(__location__,'jno.jno'),'rb') as jno:
		for line in jno:
			line = line.strip()
			# see if line gives directory of arduino executive file
			if line.startswith("EXEC_DIR"):
				jno_dict["EXEC_DIR"] = line.split('==')[1]
			elif line.startswith("EXEC_LIBS"):
				jno_dict["EXEC_LIBS"] = line.split('==')[1]
			elif line.startswith("BOARD"):
				jno_dict["BOARD"] = line.split('==')[1]
			elif line.startswith("BAUDRATE"):
				jno_dict["BAUDRATE"] = line.split('==')[1]
			elif line.startswith("PORT"):
				jno_dict["PORT"] = line.split('==')[1]
			elif line.startswith("SKETCH_DIR"):
				jno_dict["SKETCH_DIR"] = line.split('==')[1]
	# verify necessities are filled out
	if jno_dict["EXEC_DIR"] == "NULL":
		raise ValueError("no EXEC_DIR provided for arduino IDE")
	if jno_dict["EXEC_LIBS"] == "DEFAULT":
		jno_dict["EXEC_LIBS"] = os.path.join(jno_dict["EXEC_DIR"],"libraries")
	jno_dict["EXEC_SCRIPT"] = os.path.join(jno_dict["EXEC_DIR"],"arduino")
	if jno_dict["SKETCH_DIR"] == "DEFAULT":
		jno_dict["SKETCH_DIR"] = __location__
	elif not jno_dict["SKETCH_DIR"].startswith('/'):
		jno_dict["SKETCH_DIR"] = os.path.join(__location__,jno_dict["SKETCH_DIR"])
	# add lib dir and sketch dir to dictionary
	jno_dict["ARDUINO_SKETCH"] = os.path.join(__location__,'sketch/sketch.ino')
	jno_dict["ARDUINO_SKETCH_LIBS"] = os.path.join(__location__,'lib')
	return jno_dict


# Returns meaning of return code
def return_code_qualifier(return_code):
	return_code_dict = {
		0:"Success",
		1:"Build failed or upload failed",
		2:"Sketch not found",
		3:"Invalid argument for commandline option",
		4:"Preference passed to --get-pref does not exist"
	}
	return return_code_dict[return_code]


# Open serial communication with arduino
def start_serialcomm(jno_dict):
	print 'TO-DO: make serialcomm'


def main(argv):
	serialComm = False
	try:
		jno_dict = parse_jno()
	except IOError:
		init_jno()
		jno_dict = parse_jno()
	if DEBUG: print jno_dict
	arg_list = [jno_dict["EXEC_SCRIPT"]]
	try:
		opts,args = getopt.getopt(argv, 'ivup:b:',['serial','init','verify','upload','build','port=','board=','baud='])
	except getopt.GetoptError:
		print 'invalid arguments'
		quit()
	for opt, arg in opts:
		if opt in ("-v","--verify","--build"):
			arg_list.append("--verify")
			arg_list.append(jno_dict["ARDUINO_SKETCH"])
		if opt in ("-u","--upload"):
			arg_list.append("--upload")
			arg_list.append(jno_dict["ARDUINO_SKETCH"])
		if opt in ("-p","--port"):
			if arg.strip() == "":
				raise ValueError("no port provided")
			arg_list.append("--port")
			arg_list.append(arg)
		if opt in ("--board"):
			if arg.strip() == "":
				raise ValueError("no board type provided")
			arg_list.append("--board")
			arg_list.append("arduino:avr:"+arg.strip())
		if opt in ("-b","--baud"):
			if arg.strip() == "":
				raise ValueError("no baudrate provided")
			jno_dict["BAUDRATE"] = arg
		if opt in ("-i","--init"):
			init_jno()
			quit()
		if opt in ("--serial"):
			serialComm = True

	# perform serialComm, if requested
	if serialComm:
		start_serialcomm(jno_dict)
		quit()

	if len(arg_list) < 2:
		print "no arguments received, doing nothing..."
	else:
		if "--upload" in arg_list and "--port" not in arg_list:
			arg_list.append("--port")
			arg_list.append(jno_dict["PORT"])
		#add particular board, uncomment the correct one
		if "--board" not in arg_list:
			arg_list.append("--board")
			arg_list.append(jno_dict["BOARD"])
		##### arg_list.append("arduino:avr:uno")
		
		if DEBUG: print arg_list
		
		#decide if to move libraries over
		if "--upload" in arg_list or "--verify" in arg_list:
			move_libs(jno_dict)
		
		os.system('cd ~')
		try:
			returned = subprocess.check_call(arg_list)
		except subprocess.CalledProcessError,e:
			returned = e.returncode
		print 'ALL ACTIONS COMPLETED: {}'.format(return_code_qualifier(returned))


if __name__ == '__main__':
	args = sys.argv[1:]
	if "build" in args:
		args[args.index("build")] = "--build"
	elif "serial" in args:
		args[args.index("serial")] = "--serial"
	elif "upload" in args:
		args[args.index("upload")] = "--upload"
	
	main(args)
